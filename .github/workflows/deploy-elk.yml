name: Deploy ELK to EC2

on:
  workflow_dispatch:        # 수동 실행
  push:
    paths:
      - elk/**       # ELK 관련 파일이 바뀔 때만 자동 실행
    branches: [ master ]

jobs:
  deploy-elk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) PEM 복원
      - name: Decode PEM
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/homepem.pem
          chmod 600 ${{ github.workspace }}/homepem.pem

      # 2) 필수 패키지 (Docker & Compose) 설치
      - name: Install Docker on ELK
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem \
              ${{ secrets.EC2_USER }}@${{ secrets.ELK_HOST }} <<'EOS'
            set -e
            command -v docker >/dev/null || {
              sudo apt update && sudo apt -y install docker.io
              sudo systemctl enable --now docker
            }
            command -v docker-compose >/dev/null || {
              sudo curl -sSL https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) \
                   -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose
            }
          EOS

      # 3) ELK 파일 업로드
      - name: Copy compose & config
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem \
              ${{ secrets.EC2_USER }}@${{ secrets.ELK_HOST }} "mkdir -p ~/elk/logstash"
          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem \
              elk/docker-compose.yml \
              ${{ secrets.EC2_USER }}@${{ secrets.ELK_HOST }}:~/elk/
          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem \
              elk/logstash/logstash.conf \
              ${{ secrets.EC2_USER }}@${{ secrets.ELK_HOST }}:~/elk/logstash/

      # 4) ELK 스택 재기동
      - name: Restart ELK stack
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem \
              ${{ secrets.EC2_USER }}@${{ secrets.ELK_HOST }} <<'EOS'
          set -e
          cd ~/elk

          # 이미지 가져오기 및 컨테이너 재생성
          sudo docker-compose pull                       # ← sudo 추가
          sudo docker-compose up -d --force-recreate     # ← sudo 추가

          # 불필요 이미지 정리
          sudo docker image prune -f
          EOS
