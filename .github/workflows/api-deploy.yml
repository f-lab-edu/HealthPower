name: Deploy Spring Boot to EC2 Instances

on:
  push:
    branches: [ master ]
    paths:
      - 'healthpower-api/**'  # healthpower-api 폴더 내 변경이 있을 때만 실행
      - 'healthpower-core/**'    # 의존하는 core 모듈 변경 시에도 실행
      - 'healthpower-infra/**'   # 의존하는 infra 모듈 변경 시에도 실행
  workflow_dispatch:

jobs:
  deploy-app:
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: HealthPower

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Clean old JARs
        run: rm -f healthpower-api/build/libs/*.jar

      - name: Build Spring Boot application(bootJar for healthpower-api)
        run: ./gradlew healthpower-api:bootJar

      - name: Decode PEM key for APP EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/app_homepem.pem
          chmod 600 ${{ github.workspace }}/app_homepem.pem

      - name: Prepare APP EC2 directories and Sync APP project files
        run: |
          APP_BASE_PROJECT_DIR="/home/ubuntu/${{ env.PROJECT_NAME }}" 
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }} "mkdir -p ${APP_BASE_PROJECT_DIR}/healthpower-api"
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }} "mkdir -p ${APP_BASE_PROJECT_DIR}/build/libs"

          API_JAR_PATH="${{ github.workspace }}/healthpower-api/build/libs/healthpower-api-0.0.1-SNAPSHOT.jar"
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem" "${API_JAR_PATH}" ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }}:"${APP_BASE_PROJECT_DIR}/healthpower-api"
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem" deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }}:${APP_BASE_PROJECT_DIR}/
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem" docker-compose.bluegreen.yml ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }}:${APP_BASE_PROJECT_DIR}/
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem" healthpower-api/Dockerfile ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }}:${APP_BASE_PROJECT_DIR}/healthpower-api/

      - name: Create .env file on APP EC2
        run: |
          APP_BASE_PROJECT_DIR="/home/ubuntu/${{ env.PROJECT_NAME }}" 
          
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }} << EOF
            cat > ${APP_BASE_PROJECT_DIR}/.env << INNER_EOF
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            TOSS_SECRET=${{ secrets.TOSS_SECRET }}
            TOSS_CLIENT=${{ secrets.TOSS_CLIENT }}
            SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            APP_UPLOAD_DIR=${{ secrets.APP_UPLOAD_DIR }}
            IMAGE_NAME=${{ secrets.IMAGE_NAME }}
            INNER_EOF
          EOF

      - name: Ensure Docker (and Java for host execution) are installed on APP EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }} << EOF
            echo "--- Starting Docker/Java installation check for APP ---"
            sudo apt update
            sudo apt upgrade -y

            if ! command -v java &> /dev/null || ! java -version 2>&1 | grep -q "version \"21\." ; then
              echo "Java 21 JRE not found, installing openjdk-21-jre..."
              sudo apt install -y openjdk-21-jre
            else
              echo "Java 21 JRE already installed."
            fi

            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
          
              sudo apt update
          
              sudo apt install -y docker-ce docker-ce-cli containerd.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi
            if ! id -nG "\$USER" | grep -qw "docker"; then
              echo "Adding user '\$USER' to docker group..."
              sudo usermod -aG docker "\$USER"
            fi

            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose v2 not found on APP server, installing via apt..."
              sudo apt install -y docker-compose
              if ! command -v docker-compose &> /dev/null; then
                echo "WARNING: Docker Compose v2 installation failed or is not recognized on APP server after apt install."
              fi
            else
              echo "Docker Compose v2 already installed on APP server."
            fi

            if ! docker network ls | grep -q "backend"; then
                echo "Creating Docker network 'backend'..."
                sudo docker network create backend
            fi
            echo "--- Installation checks complete for APP ---"
          EOF

      - name: Execute deploy script on APP EC2
        run: |
          APP_BASE_PROJECT_DIR="/home/ubuntu/${{ env.PROJECT_NAME }}" 
          
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }} << EOF
            chmod +x "${APP_BASE_PROJECT_DIR}/deploy.sh"
            
            echo "Executing deploy.sh..."
            "${APP_BASE_PROJECT_DIR}/deploy.sh"
          EOF

  notify-slack:
    runs-on: ubuntu-latest
    needs: [deploy-app]
    if: always()

    steps:
      - name: Slack Notify - 성공
        if: success() && needs.deploy-app.result == 'success'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ HealthPower API 서버 배포 성공! :sparkles:"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}

      - name: Slack Notify - 실패
        if: failure() || needs.deploy-app.result == 'failure'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ HealthPower API 서버 배포 실패! 확인 필요 :warning:"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}