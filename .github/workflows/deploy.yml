name: Deploy (Blue-Green)

on:
  workflow_run:
    workflows: [ "Build & Push image" ]
    types: [ completed ]
workflow_dispatch:

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

    steps:
      - name: Write SSH key
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/homepem.pem
          chmod 600 ${{ github.workspace }}/homepem.pem

      - name: Set color
        id: color
        run: |
          # ÌååÎûÄ ‚Üí Ï¥àÎ°ù ‚Üí ÌååÎûÄ ‚Ä¶ ÌÜ†Í∏Ä
          STATE_FILE=color.txt
          COLOR=green
          if [ -f $STATE_FILE ] && [ "$(cat $STATE_FILE)" = "green" ]; then
            COLOR=blue
          fi
          echo $COLOR > $STATE_FILE
          echo "color=$COLOR" >> "$GITHUB_OUTPUT"

      - name: Probe port 22 BEFORE SSH
        run: |
          timeout 5 bash -c "cat < /dev/null > /dev/tcp/${{ secrets.EC2_HOST }}/22" \
          && echo "‚úÖ 22/tcp reachable" || (echo "‚ùå 22/tcp closed"; exit 1)

      - name: Debug SSH connectivity
        run: |
          set -eux
          ssh -vvv \
            -o ConnectTimeout=10 \
            -o BatchMode=yes \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ${{ github.workspace }}/homepem.pem \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "echo SSH OK"

      - name: Upload .env file
        run: |
          set -eux
          COLOR="${{ steps.color.outputs.color }}"
          
          ssh -i ${{ github.workspace }}/homepem.pem \
            -o StrictHostKeyChecking=no \
            -o BatchMode=yes \
            -o ConnectTimeout=10 \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<EOF
          mkdir -p ~/blue-green
          cat > ~/blue-green/.env <<EODE
          COLOR=$COLOR
          IMAGE_TAG=${{ github.sha }}
          ECR_REGISTRY=${{ env.ECR_REGISTRY }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          TOSS_SECRET=${{ secrets.TOSS_SECRET }}
          TOSS_CLIENT=${{ secrets.TOSS_CLIENT }}
          SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
          AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          LOGSTASH_HOST=${{ secrets.ELK_HOST }}
          LOGSTASH_PORT=5000
          EODE
          EOF

      - name: Install Docker (if not installed) + Compose v2
        run: |
          ssh -i ${{ github.workspace }}/homepem.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<'EOF'
          set -e
          
          if ! command -v docker &> /dev/null; then
          echo "üîß Installing Docker..."
          sudo apt update
          sudo apt install -y ca-certificates curl gnupg lsb-release
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt update
          sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
          fi
          
          echo "üü¢ Ensuring Docker is running..."
          sudo systemctl enable docker
          sudo systemctl start docker

          sudo usermod -aG docker $USER
          
          newgrp docker <<EONG
          echo "‚úÖ Docker Í∑∏Î£π Í∂åÌïú Ï†ÅÏö©Îê®"
          docker compose version
          EONG
          
          if ! docker compose version &> /dev/null; then
          echo "üîß Installing Docker Compose V2 plugin..."
          sudo apt install -y docker-compose-plugin
          fi
    
          docker compose version
          EOF

      - name: Checkout repository to root
        uses: actions/checkout@v3
        with:
          path: .

      - name: Fix PEM file permission just before scp
        run: chmod 600 ${{ github.workspace }}/homepem.pem

      - name: Upload docker-compose file
        run: |
          ls -al ./deploy
          
          scp -i ${{ github.workspace }}/homepem.pem -o StrictHostKeyChecking=no \
          ./docker-compose.bluegreen.yml \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/blue-green/docker-compose.bluegreen.yml

      - name: Install AWS CLI if not present
        run: |
          ssh -i homepem.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<'EOF'
          if ! command -v aws &> /dev/null; then
            sudo apt update
            sudo apt install -y unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          EOF

      - name: Login to AWS ECR
        run: |
          ssh -i homepem.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<EOF
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_KEY }}"
          export AWS_REGION="ap-northeast-2"
          
          /usr/local/bin/aws ecr get-login-password --region ap-northeast-2 \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
          EOF

      - name: Create external Docker network if missing
        run: |
          ssh -i homepem.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<'EOF'
          if ! docker network ls | grep -q backend; then
            echo "üß± Creating Docker network: backend"
            docker network create backend
          else
            echo "‚úÖ Docker network 'backend' already exists"
          fi
          EOF

      - name: Switch containers
        run: |
          COLOR=${{ steps.color.outputs.color }}
          OLD=$( [ "$COLOR" = "blue" ] && echo spring-green || echo spring-blue )

          ssh -i ${{ github.workspace }}/homepem.pem -o StrictHostKeyChecking=no \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<-EOF
          set -e -o pipefail
          cd ~/blue-green
          set -a
          source .env
          set +a

          export IMAGE_TAG   # compose Í∞Ä env Î≥ÄÏàò ÏùΩÏùå

          if ! groups $USER | grep -q '\bdocker\b'; then
            echo "[info] ÌòÑÏû¨ Ïú†Ï†Ä Í∑∏Î£π ÌôïÏù∏"
            groups
            echo "[info] docker Í∑∏Î£π Ï¶âÏãú Ï†ÅÏö©"
            docker ps
          fi

          docker compose -f docker-compose.bluegreen.yml pull "spring-\$COLOR"
          
          if ! docker compose -f docker-compose.bluegreen.yml up -d redis nginx "spring-\$COLOR"; then
            echo "‚ö†Ô∏è spring-$COLOR Í∏∞Îèô Ïã§Ìå®, Ïª®ÌÖåÏù¥ÎÑà Î°úÍ∑∏ Îç§ÌîÑ:"
            docker logs spring-$COLOR --tail 200 || true
            exit 1
          fi

          docker exec spring-\$COLOR curl -s --fail http://localhost:8080/actuator/health || echo "curl failed"

          docker logs spring-\$COLOR | tail -30

          docker inspect spring-\$COLOR --format '{{json .State.Health}}'

          for i in {1..40}; do
            status=\$(docker inspect -f '{{ .State.Health.Status }}' "spring-\$COLOR" 2>/dev/null || echo starting)
            echo "loop $i : \$status"
            [ "$status" = "healthy" ] && break
            sleep 3
          done

          [ "\$status" = "healthy" ] || {
           echo 'Health FAIL';
           docker logs "spring-$COLOR" | tail -50;
           exit 1;
          }

          docker compose -f docker-compose.bluegreen.yml exec nginx nginx -s reload
          docker compose -f docker-compose.bluegreen.yml stop "$OLD" || true
          EOF
          
      - name: Show Spring logs on failure
        if: failure()
        run: |
          echo "üî¥ Showing spring-${COLOR} logs..."
          docker logs spring-${COLOR} || true

