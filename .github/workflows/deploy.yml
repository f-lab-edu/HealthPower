name: Deploy Spring Boot to Multi-EC2 Instances

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  deploy-elk:
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: HealthPower

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Decode PEM key for ELK EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/elk_homepem.pem
          chmod 600 ${{ github.workspace }}/elk_homepem.pem

      - name: Prepare ELK EC2 directories and Sync ELK project files
        run: |
          ELK_BASE_PROJECT_DIR="/home/ubuntu/${{ env.PROJECT_NAME }}"
          
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/elk_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.ELK_EC2_HOST }} "mkdir -p \"${ELK_BASE_PROJECT_DIR}/elk\""

          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/elk_homepem.pem" elk/ ${{ secrets.EC2_USER }}@${{ secrets.ELK_EC2_HOST }}:"${ELK_BASE_PROJECT_DIR}/elk/"

      - name: Ensure Docker, Docker Compose (v2) and Java are installed on ELK EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/elk_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.ELK_EC2_HOST }} << EOF
            echo "--- Starting Docker/Java/Compose installation check for ELK ---"
            sudo apt update
            sudo apt upgrade -y

            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
          
              sudo apt update
          
              sudo apt install -y docker-ce docker-ce-cli containerd.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi
            if ! id -nG "\$USER" | grep -qw "docker"; then
              echo "Adding user '\$USER' to docker group..."
              sudo usermod -aG docker "\$USER"
            fi
          
            echo "Attempting to remove old docker-compose (v1) if present..."
            sudo apt remove -y docker-compose || true
            sudo rm -f /usr/local/bin/docker-compose || true
            sudo rm -f /usr/bin/docker-compose || true

            if ! docker compose version &> /dev/null; then
              echo "Docker Compose v2 not found, attempting installation via apt..."
              sudo apt install -y docker-compose-plugin
          
              export PATH="\$PATH:/usr/lib/docker/cli-plugins/"
          
              if ! docker compose version &> /dev/null; then
                echo "apt installation failed for docker-compose-plugin. Falling back to manual Docker Compose v1 installation."
                sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
                if [ ! -f /usr/bin/docker-compose ]; then
                  sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
                fi
                echo "WARNING: 'docker compose' (v2) command might not work. Workflow will attempt to use 'docker-compose' (v1) if 'docker compose' fails."
              fi
            else
              echo "Docker Compose v2 already installed."
            fi

            if ! command -v java &> /dev/null || ! java -version 2>&1 | grep -q "version \"17\." ; then
              echo "Java 17 JRE not found, installing openjdk-17-jre..."
              sudo apt install -y openjdk-17-jre
            else
              echo "Java 17 JRE already installed."
            fi
          
            echo "--- Installation checks complete for ELK ---"
            echo "Verifying docker and docker compose versions:"
            docker version
            docker compose version || docker-compose version || echo "Docker Compose (v1 or v2) not found or not in PATH."
            echo "--- End of Docker/Java/Compose installation check ---"
          EOF

      - name: Run ELK Docker Compose on ELK EC2
        run: |
          ELK_BASE_PROJECT_DIR="/home/ubuntu/${{ env.PROJECT_NAME }}" 
          
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/elk_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.ELK_EC2_HOST }} << EOF
            cd "${ELK_BASE_PROJECT_DIR}/elk" 
            if command -v docker && docker compose version &> /dev/null; then
                echo "Using 'docker compose' (v2) command."
                sudo docker compose up -d --build --remove-orphans
            elif command -v docker-compose &> /dev/null; then
                echo "Using 'docker-compose' (v1) command."
                sudo docker-compose up -d --build --remove-orphans
            else
                echo "Error: Neither 'docker compose' nor 'docker-compose' command found. Cannot start ELK."
                exit 1
            fi
          EOF

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-elk

    env:
      PROJECT_NAME: HealthPower

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Clean old JARs
        run: rm -f healthpower-api/build/libs/*.jar

      - name: Build Spring Boot application(bootJar for healthpower-api)
        run: ./gradlew healthpower-api:bootJar

      - name: Decode PEM key for APP EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/app_homepem.pem
          chmod 600 ${{ github.workspace }}/app_homepem.pem

      - name: Prepare APP EC2 directories and Sync APP project files
        run: |
          APP_BASE_PROJECT_DIR="/home/ubuntu/${{ env.PROJECT_NAME }}" 
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }} "mkdir -p ${APP_BASE_PROJECT_DIR}/healthpower-api"
          API_JAR_PATH="${{ github.workspace }}/healthpower-api/build/libs/healthpower-api-0.0.1-SNAPSHOT.jar"
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem" "${API_JAR_PATH}" ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }}:"${APP_BASE_PROJECT_DIR}/healthpower-api/"
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem" deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }}:${APP_BASE_PROJECT_DIR}/

      - name: Create .env file on APP EC2
        run: |
          APP_BASE_PROJECT_DIR="/home/ubuntu/${{ env.PROJECT_NAME }}" 
          
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }} << EOF
            cat > ${APP_BASE_PROJECT_DIR}/.env << INNER_EOF
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            TOSS_SECRET=${{ secrets.TOSS_SECRET }}
            TOSS_CLIENT=${{ secrets.TOSS_CLIENT }}
            SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            INNER_EOF
          EOF"

      - name: Ensure Docker (and Java for host execution) are installed on APP EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }} << EOF
            echo "--- Starting Docker/Java installation check for APP ---"
            sudo apt update
            sudo apt upgrade -y

            if ! command -v java &> /dev/null || ! java -version 2>&1 | grep -q "version \"21\." ; then
              echo "Java 21 JRE not found, installing openjdk-21-jre..."
              sudo apt install -y openjdk-21-jre
            else
              echo "Java 21 JRE already installed."
            fi

            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
          
              sudo apt update
          
              sudo apt install -y docker-ce docker-ce-cli containerd.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi
            if ! id -nG "\$USER" | grep -qw "docker"; then
              echo "Adding user '\$USER' to docker group..."
              sudo usermod -aG docker "\$USER"
            fi

            if ! docker compose version &> /dev/null; then
              echo "Docker Compose v2 not found on APP server, installing via apt..."
              sudo apt install -y docker-compose-plugin
              if ! docker compose version &> /dev/null; then
                echo "WARNING: Docker Compose v2 installation failed or is not recognized on APP server after apt install."
              fi
            else
              echo "Docker Compose v2 already installed on APP server."
            fi

            if ! docker network ls | grep -q "backend"; then
                echo "Creating Docker network 'backend'..."
                sudo docker network create backend
            fi
            echo "--- Installation checks complete for APP ---"
          EOF

      - name: Execute deploy script on APP EC2
        run: |
          APP_BASE_PROJECT_DIR="/home/ubuntu/${{ env.PROJECT_NAME }}" 
          
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }} << EOF
            chmod +x "${APP_BASE_PROJECT_DIR}/deploy.sh"
          
            if [ -f "${APP_BASE_PROJECT_DIR}/.env" ]; then
              set -a
              . "${APP_BASE_PROJECT_DIR}/.env"
              set +a
              echo "Environment variables loaded from .env"
            else
              echo "WARNING: .env file not found at ${APP_BASE_PROJECT_DIR}/.env"
            fi
          
            echo "Executing deploy.sh..."
            "${APP_BASE_PROJECT_DIR}/deploy.sh"
          EOF

  notify-slack:
    runs-on: ubuntu-latest
    needs: [deploy-elk, deploy-app]
    if: always()

    steps:
      - name: Slack Notify - 성공
        if: success() && needs.deploy-elk.result == 'success' && needs.deploy-app.result == 'success'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ HealthPower 전체 서버 배포 성공! :sparkles:"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}

      - name: Slack Notify - 실패
        if: failure() || needs.deploy-elk.result == 'failure' || needs.deploy-app.result == 'failure'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ HealthPower 서버 배포 실패! 확인 필요 :warning:"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}