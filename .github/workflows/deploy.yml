name: Deploy Spring Boot to Multi-EC2 Instances

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
#  ELK 스택 배포 (ELK 서버)
  deploy-elk:
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: HealthPower
      ELK_PROJECT_PATH_ON_EC2: /home/ubuntu/${{ vars.PROJECT_NAME }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Decode PEM key for ELK EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/elk_homepem.pem
          chmod 600 ${{ github.workspace }}/elk_homepem.pem

      - name: Sync ELK project files to ELK EC2
        run: |
          # ELK 서버에 HealthPower 디렉토리 생성
          # 변수를 명시적으로 사용하고, SSH 명령을 더 명확하게 구성
          # ELK_PROJECT_DIR은 /home/ubuntu/HealthPower가 될 것입니다.
          ELK_PROJECT_DIR="${{ env.ELK_PROJECT_PATH_ON_EC2 }}"
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/elk_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.ELK_EC2_HOST }} "mkdir -p \"${ELK_PROJECT_DIR}\""

          # elk 폴더만 동기화하는 것이 더 안전하고 명확합니다.
          # rsync 명령의 원본 경로도 elk/ 로 명시
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/elk_homepem.pem" elk/ ${{ secrets.EC2_USER }}@${{ secrets.ELK_EC2_HOST }}:"${ELK_PROJECT_DIR}/elk/"

      - name: Ensure Docker and Docker Compose are installed on ELK EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/elk_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.ELK_EC2_HOST }} << 'EOF'
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo apt update
              sudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
              sudo apt update
              sudo apt install -y docker-ce docker-ce-cli containerd.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi
            if ! command -v docker-compose &> /dev/null; then
              echo "docker-compose not found, installing..."
              sudo curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          EOF

      - name: Run ELK Docker Compose on ELK EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/elk_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.ELK_EC2_HOST }} << 'EOF'
            cd ${{ env.ELK_PROJECT_PATH_ON_EC2 }}/elk
            sudo docker-compose up -d --build --remove-orphans
          EOF

  # --- 애플리케이션 배포 (애플리케이션 서버) ---
  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-elk

    env:
      PROJECT_NAME: HealthPower
      APP_PROJECT_PATH_ON_EC2: /home/ubuntu/${{ vars.PROJECT_NAME }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Clean old JARs
        run: rm -f healthpower-api/build/libs/*.jar

      - name: Build Spring Boot application(bootJar for healthpower-api)
        run: ./gradlew healthpower-api:bootJar

      - name: Decode PEM key for APP EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/app_homepem.pem
          chmod 600 ${{ github.workspace }}/app_homepem.pem

      - name: Sync APP project files to APP EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }} "mkdir -p ${{ env.PROJECT_PATH_ON_EC2 }}"
          rsync -avz --exclude '.git' --exclude '.github' --exclude 'build' --exclude 'out' -e "ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem" . ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ env.PROJECT_PATH_ON_EC2 }}
          
      - name: Create .env file on APP EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }} "cat > ${{ env.PROJECT_PATH_ON_EC2 }}/.env << EOF
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            TOSS_SECRET=${{ secrets.TOSS_SECRET }}
            TOSS_CLIENT=${{ secrets.TOSS_CLIENT }}
            SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            # ECR을 사용한다면 ECR_REGISTRY와 IMAGE_TAG도 여기에 추가
            # ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}
            # IMAGE_TAG=latest # 또는 GitHub Action run ID 등을 태그로 사용
            EOF"

      - name: Ensure Docker and Docker Compose are installed on APP EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }} << 'EOF'
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo apt update
              sudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
              sudo apt update
              sudo apt install -y docker-ce docker-ce-cli containerd.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi
            if ! command -v docker-compose &> /dev/null; then
              echo "docker-compose not found, installing..."
              sudo curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            # Docker network 생성 (애플리케이션 서버에서 사용할 backend 네트워크)
            if ! docker network ls | grep -q "backend"; then
                echo "Creating Docker network 'backend'..."
                sudo docker network create backend
            fi
          EOF

      - name: Execute deploy script on APP EC2
        run: |
            ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/app_homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.APP_EC2_HOST }} "chmod +x ${{ env.PROJECT_PATH_ON_EC2 }}/deploy.sh && ${{ env.PROJECT_PATH_ON_EC2 }}/deploy.sh"
        env: # deploy.sh 스크립트로 환경 변수를 전달
          # 여기서 secrets 값을 deploy.sh가 직접 접근할 수 있도록 export 합니다.
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TOSS_SECRET: ${{ secrets.TOSS_SECRET }}
          TOSS_CLIENT: ${{ secrets.TOSS_CLIENT }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          # ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }} # ECR 사용 시 주석 해제
          # IMAGE_TAG: latest # ECR 사용 시 주석 해제

  # --- 배포 성공/실패 알림 ---
  notify-slack:
    runs-on: ubuntu-latest
    needs: [deploy-elk, deploy-app] # 두 Job 모두 완료된 후에 실행
    if: always() # 어떤 경우에도 실행되도록

    steps:
      - name: Slack Notify - 성공
        if: success() && needs.deploy-elk.result == 'success' && needs.deploy-app.result == 'success'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ HealthPower 전체 서버 배포 성공!"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}

      - name: Slack Notify - 실패
        if: failure() || needs.deploy-elk.result == 'failure' || needs.deploy-app.result == 'failure'
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ HealthPower 서버 배포 실패! 확인 필요"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}