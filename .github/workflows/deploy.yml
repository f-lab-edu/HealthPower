name: Deploy Spring Boot to EC2

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Decode PEM key for EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > homepem.pem
          chmod 600 homepem.pem

      - name: Upload prod properties to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i homepem.pem application-prod.properties ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/application-prod.properties

      - name: Build Spring Boot application (fat JAR)
        run: ./gradlew clean bootJar

      - name: Upload JAR and Dockerfile to EC2 via SCP
        run: |
          JAR_FILE=$(ls build/libs/*.jar | head -n 1)
          echo "Uploading $JAR_FILE to EC2..."
          scp -o StrictHostKeyChecking=no -i homepem.pem "$JAR_FILE" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app.jar
          scp -o StrictHostKeyChecking=no -i homepem.pem Dockerfile ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Dockerfile


      - name: Create log directory on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          mkdir -p /home/ubuntu/logs && chmod 755 /home/ubuntu/logs
          "

      - name: Run Spring Boot App on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          echo "Creating upload directory..."
          mkdir -p /home/ubuntu/uploads

          echo "Stopping existing Java process..."
          pkill -f 'java' || true

          echo "Starting Spring Boot application..."
          nohup java -Dspring.config.location=/home/ubuntu/application-prod.properties \
          -Dspring.profiles.active=prod -jar /home/ubuntu/app.jar > /home/ubuntu/app.log 2>&1 &
          EOF

      - name: Run Blue-Green Deployment
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          "CURRENT=\$(docker ps | grep spring-blue && echo blue || echo green); echo 현재버전은 \$CURRENT"

      - name: Print server log after failure
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          'tail -n 100 /home/ubuntu/app.log'

      - name: Slack Notify - 성공
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":" HealthPower 서버 배포 성공! "}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}

      - name: Slack Notify - 실패
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":" *HealthPower* 서버 배포 *실패* \n확인 필요!"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}




