
name: Deploy Spring Boot to EC2

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

#      - name: Set up production DB properties
#        run: |
#          echo "spring.datasource.url=${{ secrets.DB_URL }}" >> src/main/resources/application-prod.properties
#          echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> src/main/resources/application-prod.properties
#          echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> src/main/resources/application-prod.properties
#          echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application-prod.properties

      - name: Decode PEM key for EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > homepem.pem
          chmod 600 homepem.pem

      - name: Send prod DB config to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            echo "spring.datasource.url=${{ secrets.DB_URL }}" > ~/application-prod.properties
            echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> ~/application-prod.properties
            echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> ~/application-prod.properties
            echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> ~/application-prod.properties
            echo "spring.jpa.hibernate.ddl-auto=update" >> ~/application-prod.properties
            echo "spring.profiles.active=prod" >> ~/application-prod.properties
          EOF

      - name: Build Spring Boot application (fat JAR)
        run: ./gradlew clean bootJar

      - name: Decode PEM key for EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ec2_key.pem
          chmod 600 ec2_key.pem
      - name: Upload JAR to EC2 via SCP
        run: |
          JAR_FILE=$(ls build/libs/*.jar | head -n 1)
          echo "Uploading $JAR_FILE to EC2..."
          scp -o StrictHostKeyChecking=no -i ec2_key.pem "$JAR_FILE" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app.jar
      - name: Run JAR on EC2 via SSH
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Stopping existing Spring Boot application..."
            pkill -f 'java' || true
            echo "Starting new Spring Boot application..."
            nohup java -jar ~/app.jar > ~/app.log 2>&1 &
            echo "Application started."
          EOF
