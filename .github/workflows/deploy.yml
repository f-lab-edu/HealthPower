name: Deploy Spring Boot to EC2

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Decode PEM key for EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/homepem.pem
          chmod 600 ${{ github.workspace }}/homepem.pem

      - name: 🔍 Verify PEM file existence
        run: |
          echo "Checking if PEM file exists..."
          ls -alh ${{ github.workspace }}/homepem.pem

      - name: Build Spring Boot application
        run: ./gradlew clean bootJar

      - name: Upload JAR and Dockerfile to EC2 via SCP
        run: |
          JAR_FILE=$(find build/libs -name "*.jar" | sort | tail -n1)
          echo "Uploading $JAR_FILE to EC2..."
          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem "$JAR_FILE" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app.jar
          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem Dockerfile ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Dockerfile

      - name: Run Spring Boot App on EC2
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TOSS_SECRET: ${{ secrets.TOSS_SECRET }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          echo "Connecting to EC2 and restarting app..."
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            echo "Stopping old app if running..."
            pkill -f java || true

            echo "Starting new app..."
            nohup java \
              -Dspring.profiles.active=prod \
              -Dspring.datasource.url="${DB_URL}" \
              -Dspring.datasource.username="${DB_USERNAME}" \
              -Dspring.datasource.password="${DB_PASSWORD}" \
              -Djwt.secret="${JWT_SECRET}" \
              -Dtoss.secret="${TOSS_SECRET}" \
              -Dcloud.aws.credentials.access-key="${AWS_ACCESS_KEY}" \
              -Dcloud.aws.credentials.secret-key="${AWS_SECRET_KEY}" \
              -Dcloud.aws.s3.bucket="${AWS_S3_BUCKET}" \
              -Dslack.webhook.url="${SLACK_WEBHOOK_URL}" \
              -Dapp.upload.dir=/home/ubuntu/uploads \
              -jar /home/ubuntu/app.jar > /home/ubuntu/app.log 2>&1 &
          '

      - name: Slack Notify - 성공
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ HealthPower 서버 배포 성공!"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}

      - name: Slack Notify - 실패
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ HealthPower 서버 배포 실패! 확인 필요"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}
