name: Deploy Spring Boot to EC2

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Decode PEM key for EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > homepem.pem
          chmod 600 homepem.pem

      - name: Build Spring Boot application (fat JAR)
        run: ./gradlew clean bootJar

      - name: Upload JAR and Dockerfile to EC2 via SCP
        run: |
          set -e
          JAR_FILE=$(ls build/libs/*.jar | head -n 1)
          echo "Uploading $JAR_FILE to EC2..."
          scp -v -o StrictHostKeyChecking=no -i homepem.pem "$JAR_FILE" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app.jar
          scp -v -o StrictHostKeyChecking=no -i homepem.pem Dockerfile ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Dockerfile

      - name: Create log & upload directories on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          mkdir -p /home/ubuntu/uploads /home/ubuntu/logs && chmod 755 /home/ubuntu/logs
          "

      - name: Run Spring Boot App on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
echo "Stopping existing Java process..."
pkill -f 'java' || true

echo "Starting Spring Boot application..."
nohup java \
-Dspring.profiles.active=prod \
-Dspring.datasource.url=${{ secrets.DB_URL }} \
-Dspring.datasource.username=${{ secrets.DB_USERNAME }} \
-Dspring.datasource.password=${{ secrets.DB_PASSWORD }} \
-Djwt.secret=${{ secrets.JWT_SECRET }} \
-Dtoss.secret=${{ secrets.TOSS_SECRET }} \
-Dcloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY }} \
-Dcloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_KEY }} \
-Dcloud.aws.s3.bucket=${{ secrets.AWS_S3_BUCKET }} \
-Dslack.webhook.url=${{ secrets.SLACK_WEBHOOK_URL }} \
-Dapp.upload.dir=/home/ubuntu/uploads \
-jar /home/ubuntu/app.jar > /home/ubuntu/app.log 2>&1 &
EOF

      - name: Slack Notify - 성공
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ HealthPower 서버 배포 성공!"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}

      - name: Slack Notify - 실패
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ *HealthPower* 서버 배포 *실패* \n확인 필요!"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}