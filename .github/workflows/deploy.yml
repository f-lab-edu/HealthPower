name: Deploy (Blue-Green)

on:
  workflow_run:
    workflows: ["Build & Push image"]
    types: [completed]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

    steps:
      - name: Write SSH key
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/homepem.pem
          chmod 600 ${{ github.workspace }}/homepem.pem

      - name: Set color
        id: color
        run: |
          STATE_FILE=color.txt
          COLOR=green
          if [[ -f $STATE_FILE && $(cat $STATE_FILE) == green ]]; then
            COLOR=blue
          fi
          echo $COLOR > $STATE_FILE
          echo "color=$COLOR" >> "$GITHUB_OUTPUT"

      - name: Switch containers
        env:
          COLOR:            ${{ steps.color.outputs.color }}
          IMAGE_TAG:        ${{ github.event.workflow_run.head_sha }}
          JWT_SECRET:       ${{ secrets.JWT_SECRET }}
          TOSS_SECRET:      ${{ secrets.TOSS_SECRET }}
          TOSS_CLIENT:      ${{ secrets.TOSS_CLIENT }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          AWS_ACCESS_KEY:   ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY:   ${{ secrets.AWS_SECRET_KEY }}
          AWS_S3_BUCKET:    ${{ secrets.AWS_S3_BUCKET }}
          DB_URL:           ${{ secrets.DB_URL }}
          DB_USERNAME:      ${{ secrets.DB_USERNAME }}
          DB_PASSWORD:      ${{ secrets.DB_PASSWORD }}
          LOGSTASH_HOST:    ${{ secrets.ELK_HOST }}
          ECR_REGISTRY:     ${{ env.ECR_REGISTRY }}
        run: |
          OLD=$( [ "$COLOR" = "blue" ] && echo spring-green || echo spring-blue )
          
          ssh -o StrictHostKeyChecking=no -T -i ${{ github.workspace }}/homepem.pem \
              ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<'EOS'
          set -eo pipefail
  
         mkdir -p ~/blue-green
         cat > ~/blue-green/.env <<'ENV'
         COLOR="$COLOR"
         IMAGE_TAG="$IMAGE_TAG"
         ECR_REGISTRY="$ECR_REGISTRY"
         JWT_SECRET="$JWT_SECRET"
         TOSS_SECRET="$TOSS_SECRET"
         TOSS_CLIENT="$TOSS_CLIENT"
         SLACK_WEBHOOK_URL="$SLACK_WEBHOOK_URL"
         AWS_ACCESS_KEY="$AWS_ACCESS_KEY"
         AWS_SECRET_KEY="$AWS_SECRET_KEY"
         AWS_S3_BUCKET="$AWS_S3_BUCKET"
         DB_URL="$DB_URL"
         DB_USERNAME="$DB_USERNAME"
         DB_PASSWORD="$DB_PASSWORD"
         LOGSTASH_HOST="$LOGSTASH_HOST"
         ENV
  
         set -a && source ~/blue-green/.env && set +a
         cd ~/blue-green
  
          if ! groups $USER | grep -q '\bdocker\b'; then
          sudo usermod -aG docker $USER
          exec sg docker newgrp docker <<'INNER'
          echo "[info] docker group applied"
          INNER
          fi
  
          sudo docker compose -f docker-compose.bluegreen.yml pull "spring-$COLOR"
          sudo docker compose -f docker-compose.bluegreen.yml up -d redis nginx "spring-$COLOR"
  
         for i in {1..40}; do
          status=$(docker inspect -f '{{ .State.Health.Status }}' "spring-$COLOR" 2>/dev/null || echo starting)
          [ "$status" = healthy ] && break
          sleep 3
          done
          [ "$status" = healthy ] || { echo 'Health FAIL'; docker logs "spring-$COLOR"; exit 1; }
          
          sudo docker compose -f docker-compose.bluegreen.yml exec nginx nginx -s reload
          sudo docker compose -f docker-compose.bluegreen.yml stop "$OLD" || true
          EOS
