name: Deploy Spring Boot to EC2

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: HealthPower
      PROJECT_PATH_ON_EC2: /home/ubuntu/${{ env.PROJECT_NAME }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Clean old JARs
        run: rm -f healthpower-api/build/libs/*.jar

      - name: Build Spring Boot application(bootJar for healthpower-api)
        run: ./gradlew healthpower-api:bootJar

      - name: Decode PEM key for EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/homepem.pem
          chmod 600 ${{ github.workspace }}/homepem.pem

      - name: Sync project files to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ${{ env.PROJECT_PATH_ON_EC2 }}"
          rsync -avz --exclude '.git' --exclude '.github' --exclude 'build' --exclude 'out' -e "ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem" . ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ env.PROJECT_PATH_ON_EC2 }}
          
      - name: Create .env file on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "cat > ${{ env.PROJECT_PATH_ON_EC2 }}/.env << EOF
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            TOSS_SECRET=${{ secrets.TOSS_SECRET }}
            TOSS_CLIENT=${{ secrets.TOSS_CLIENT }}
            SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            # ECRÏùÑ ÏÇ¨Ïö©ÌïúÎã§Î©¥ ECR_REGISTRYÏôÄ IMAGE_TAGÎèÑ Ïó¨Í∏∞Ïóê Ï∂îÍ∞Ä
            # ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}
            # IMAGE_TAG=latest # ÎòêÎäî GitHub Action run ID Îì±ÏùÑ ÌÉúÍ∑∏Î°ú ÏÇ¨Ïö©
            EOF"

      - name: Ensure Docker and Docker Compose are installed on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo apt update
              sudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
              sudo apt update
              sudo apt install -y docker-ce docker-ce-cli containerd.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi
            if ! command -v docker-compose &> /dev/null; then
              echo "docker-compose not found, installing..."
              sudo curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          EOF

      - name: Run ELK Docker Compose (if not already running)
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            cd ${{ env.PROJECT_PATH_ON_EC2 }}/elk
            sudo docker compose -f docker-compose.yml up -d --build 
          EOF

      - name: Execute deploy script on EC2
        run: |
            ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "chmod +x ${{ env.PROJECT_PATH_ON_EC2 }}/deploy.sh && ${{ env.PROJECT_PATH_ON_EC2 }}/deploy.sh"
        env: # deploy.sh Ïä§ÌÅ¨Î¶ΩÌä∏Î°ú ÌôòÍ≤Ω Î≥ÄÏàòÎ•º Ï†ÑÎã¨
          # Ïó¨Í∏∞ÏÑú secrets Í∞íÏùÑ deploy.shÍ∞Ä ÏßÅÏ†ë Ï†ëÍ∑ºÌï† Ïàò ÏûàÎèÑÎ°ù export Ìï©ÎãàÎã§.
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          TOSS_SECRET: ${{ secrets.TOSS_SECRET }}
          TOSS_CLIENT: ${{ secrets.TOSS_CLIENT }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          # ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }} # ECR ÏÇ¨Ïö© Ïãú Ï£ºÏÑù Ìï¥Ï†ú
          # IMAGE_TAG: latest # ECR ÏÇ¨Ïö© Ïãú Ï£ºÏÑù Ìï¥Ï†ú

#      - name: Create elk directory on EC2
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ~/elk/logstash"
#
#      - name: Upload files to EC2
#        run: |
#          JAR_FILE=$(find build/libs -name "*.jar" | sort | tail -n1)
#          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem "$JAR_FILE" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app.jar
#          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem Dockerfile ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Dockerfile
#          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem src/main/resources/application.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/application.yml
#          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem elk/docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/elk/docker-compose.yml
#          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem elk/logstash/logstash.conf ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/elk/logstash/logstash.conf
#
#      - name: üõ† Install Java on EC2
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << "EOF"
#            sudo apt update
#            sudo apt install -y openjdk-21-jdk
#          EOF
#
#      - name: Run Spring Boot App on EC2
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
#            echo "üîÅ Í∏∞Ï°¥ Ïï± Ï¢ÖÎ£å"
#            pkill -f java || true
#
#            echo "‚è≥ logstash Ìè¨Ìä∏ Ïò§Ìîà ÎåÄÍ∏∞"
#            while ! nc -z localhost 5000; do
#              echo "logstashÍ∞Ä ÏïÑÏßÅ Ï§ÄÎπÑÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÎåÄÍ∏∞ Ï§ë..."
#              sleep 3
#            done
#
#            echo "üå± ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï"
#            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
#            export TOSS_SECRET="${{ secrets.TOSS_SECRET }}"
#            export TOSS_CLIENT="${{ secrets.TOSS_CLIENT }}"
#            export SLACK_WEBHOOK_URL="${{ secrets.SLACK_WEBHOOK_URL }}"
#            export AWS_ACCESS_KEY="${{ secrets.AWS_ACCESS_KEY }}"
#            export AWS_SECRET_KEY="${{ secrets.AWS_SECRET_KEY }}"
#            export AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}"
#            export DB_URL="${{ secrets.DB_URL }}"
#            export DB_USERNAME="${{ secrets.DB_USERNAME }}"
#            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
#
#            echo "üöÄ Spring Boot Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏãúÏûë"
#            nohup java \
#            -Dspring.profiles.active=prod \
#            -jar /home/ubuntu/app.jar \
#            --spring.config.additional-location=file:/home/ubuntu/ \
#            > /home/ubuntu/app.log 2>&1 &
#          EOF

      - name: Slack Notify - ÏÑ±Í≥µ
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚úÖ HealthPower ÏÑúÎ≤Ñ Î∞∞Ìè¨ ÏÑ±Í≥µ!"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}

      - name: Slack Notify - Ïã§Ìå®
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚ùå HealthPower ÏÑúÎ≤Ñ Î∞∞Ìè¨ Ïã§Ìå®! ÌôïÏù∏ ÌïÑÏöî"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}