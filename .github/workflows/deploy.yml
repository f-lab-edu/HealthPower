name: Deploy Spring Boot to EC2

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Set up prod DB properties
        run: |
          echo "spring.datasource.url=${{ secrets.DB_URL }}" >> application-prod.properties
          echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> application-prod.properties
          echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> application-prod.properties
          echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> application-prod.properties
          echo "spring.jpa.hibernate.ddl-auto=update" >> application-prod.properties
          echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect" >> application-prod.properties
          echo "jwt.secret=${{ secrets.JWT_SECRET }}" >> application-prod.properties
          echo "cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY }}" >> application-prod.properties
          echo "cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_KEY }}" >> application-prod.properties
          echo "cloud.aws.region.static=ap-northeast-2" >> application-prod.properties
          echo "cloud.aws.s3.bucket=${{ secrets.AWS_S3_BUCKET }}" >> application-prod.properties
          echo "server.port=8080" >> application-prod.properties
          echo "management.endpoints.web.exposure.include=health,info" >> application-prod.properties
          echo "management.endpoint.health.show-details=always" >> application-prod.properties

      - name: Decode PEM key for EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > homepem.pem
          chmod 600 homepem.pem

      - name: Upload properties to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i homepem.pem application-prod.properties ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/application-prod.properties

      - name: Build Spring Boot JAR
        run: ./gradlew clean bootJar

      - name: Upload JAR to EC2
        run: |
          JAR_FILE=$(ls build/libs/*.jar | head -n 1)
          scp -o StrictHostKeyChecking=no -i homepem.pem "$JAR_FILE" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/app.jar

      - name: Run Spring Boot App on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          pkill -f 'java' || true
          nohup java -Dspring.config.location=/home/ubuntu/application-prod.properties -Dspring.profiles.active=prod -jar /home/ubuntu/app.jar > /home/ubuntu/app.log 2>&1 &
          EOF

      - name: Health check (HTTP)
        run: |
          echo "Waiting for server to start..."
          sleep 20
          curl --fail http://${{ secrets.EC2_HOST }}:8080/actuator/health || (echo "‚ùå Health check failed" && exit 1)

      - name: Print app log if failed
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          'tail -n 100 /home/ubuntu/app.log'
