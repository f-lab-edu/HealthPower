name: Deploy (Blue-Green)

on:
  workflow_run:
    workflows: [ "Build & Push image" ]
    types: [ completed ]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

    steps:
      - name: Write SSH key
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/homepem.pem
          chmod 600 ${{ github.workspace }}/homepem.pem

      - name: Set color
        id: color
        run: |
          # 파란 → 초록 → 파란 … 토글
          STATE_FILE=color.txt
          COLOR=green
          if [ -f $STATE_FILE ] && [ "$(cat $STATE_FILE)" = "green" ]; then
            COLOR=blue
          fi
          echo $COLOR > $STATE_FILE
          echo "color=$COLOR" >> "$GITHUB_OUTPUT"

      - name: Probe port 22 BEFORE SSH
        run: |
          timeout 5 bash -c "cat < /dev/null > /dev/tcp/${{ secrets.EC2_HOST }}/22" \
          && echo "✅ 22/tcp reachable" || (echo "❌ 22/tcp closed"; exit 1)

      - name: Upload .env file
        run: |
          COLOR=${{ steps.color.outputs.color }}
          ssh -i ${{ github.workspace }}/homepem.pem -o StrictHostKeyChecking=no \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ~/blue-green"
               
          cat > .env <<EOF
          COLOR=$COLOR
          IMAGE_TAG=${{ github.event.workflow_run.head_sha }}
          ECR_REGISTRY=${{ env.ECR_REGISTRY }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          TOSS_SECRET=${{ secrets.TOSS_SECRET }}
          TOSS_CLIENT=${{ secrets.TOSS_CLIENT }}
          SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
          AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          LOGSTASH_HOST=${{ secrets.ELK_HOST }}
          EOF
          
          scp -i ${{ github.workspace }}/homepem.pem -o StrictHostKeyChecking=no .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/blue-green/.env

      - name: Install Docker (if not installed)
        run: |
          ssh -i ${{ github.workspace }}/homepem.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<'EOF'
          set -e
  
          if ! command -v docker &> /dev/null; then
          echo "🔧 Installing Docker..."
          sudo apt update
          sudo apt install -y docker.io
          sudo systemctl enable docker
          sudo systemctl start docker
          sudo usermod -aG docker $USER
          echo "✅ Docker installed and configured."
          else
          echo "✅ Docker already installed."
          fi
          
          if ! command -v docker-compose &> /dev/null; then
          echo "🔧 Installing Docker Compose..."
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version
          echo "✅ Docker Compose installed."
          else
          echo "✅ Docker Compose already installed."
          fi
          EOF
      - name: Upload docker-compose file
        working-directory: ./deploy
        run: |
          scp -i ${{ github.workspace }}/homepem.pem -o StrictHostKeyChecking=no \
            docker-compose.bluegreen.yml \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/blue-green/docker-compose.bluegreen.yml

      - name: Switch containers
        run: |
          COLOR=${{ steps.color.outputs.color }}
          OLD=$( [ "$COLOR" = "blue" ] && echo spring-green || echo spring-blue )

          ssh -i ${{ github.workspace }}/homepem.pem -o StrictHostKeyChecking=no \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<'EOF'
          set -e -o pipefail
          cd ~/blue-green
          set -a
          source .env
          set +a

          export IMAGE_TAG   # compose 가 env 변수 읽음

          if ! groups $USER | grep -q '\bdocker\b'; then
            echo "[info] 현재 유저 그룹 확인"
            groups
            echo "[info] docker 그룹 즉시 적용"
            docker ps
          fi

          docker-compose -f docker-compose.bluegreen.yml pull "spring-\$COLOR"
          docker-compose -f docker-compose.bluegreen.yml up -d redis nginx "spring-\$COLOR"

          docker exec spring-\$COLOR curl -s --fail http://localhost:8080/actuator/health || echo "curl failed"

          docker logs spring-\$COLOR | tail -30

          docker inspect spring-\$COLOR --format '{{json .State.Health}}'

          for i in {1..40}; do
            status=\$(docker inspect -f '{{ .State.Health.Status }}' "spring-\$COLOR" 2>/dev/null || echo starting)
            echo "loop $i : \$status"
            [ "$status" = "healthy" ] && break
            sleep 3
          done

          [ "\$status" = "healthy" ] || {
           echo 'Health FAIL';
           docker logs "spring-$COLOR" | tail -50;
           exit 1;
          }

          docker-compose -f docker-compose.bluegreen.yml exec nginx nginx -s reload
          docker-compose -f docker-compose.bluegreen.yml stop "$OLD" || true
          EOF
          
      - name: Show Spring logs on failure
        if: failure()
        run: |
          echo "🔴 Showing spring-${COLOR} logs..."
          docker logs spring-${COLOR} || true

