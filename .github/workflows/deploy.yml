name: Deploy (Blue-Green)

on:
  workflow_run:
    workflows: [ "Build & Push image" ]
    types: [ completed ]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

    steps:
      - name: Write SSH key
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/homepem.pem
          chmod 600 ${{ github.workspace }}/homepem.pem

      - name: Set color
        id: color
        run: |
          # ÌååÎûÄ ‚Üí Ï¥àÎ°ù ‚Üí ÌååÎûÄ ‚Ä¶ ÌÜ†Í∏Ä
          STATE_FILE=color.txt
          COLOR=green
          if [ -f $STATE_FILE ] && [ "$(cat $STATE_FILE)" = "green" ]; then
            COLOR=blue
          fi
          echo $COLOR > $STATE_FILE
          echo "color=$COLOR" >> "$GITHUB_OUTPUT"

      - name: Probe port 22 BEFORE SSH
        run: |
          timeout 5 bash -c "cat < /dev/null > /dev/tcp/${{ secrets.EC2_HOST }}/22" \
          && echo "‚úÖ 22/tcp reachable" || (echo "‚ùå 22/tcp closed"; exit 1)

      - name: Switch containers
        env:
          COLOR:          ${{ steps.color.outputs.color }}
          IMAGE_TAG:      ${{ github.event.workflow_run.head_sha }}
          JWT_SECRET:     ${{ secrets.JWT_SECRET }}
          TOSS_SECRET:    ${{ secrets.TOSS_SECRET }}
          TOSS_CLIENT:    ${{ secrets.TOSS_CLIENT }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_S3_BUCKET:  ${{ secrets.AWS_S3_BUCKET }}
          DB_URL:         ${{ secrets.DB_URL }}
          DB_USERNAME:    ${{ secrets.DB_USERNAME }}
          DB_PASSWORD:    ${{ secrets.DB_PASSWORD }}
          LOGSTASH_HOST:  ${{ secrets.ELK_HOST }}
          ECR_REGISTRY:   ${{ env.ECR_REGISTRY }}
        run: |
          OLD=$( [ "$COLOR" = "blue" ] && echo spring-green || echo spring-blue )

          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<'EOF'
          set -e -o pipefail

          mkdir -p ~/blue-green
          cat > ~/blue-green/.env <<ENV
            COLOR="${{ env.COLOR }}"
            IMAGE_TAG="${{ env.IMAGE_TAG }}"
            ECR_REGISTRY="${{ env.ECR_REGISTRY }}"
            JWT_SECRET="${{ env.JWT_SECRET }}"
            TOSS_SECRET="${{ env.TOSS_SECRET }}"
            TOSS_CLIENT="${{ env.TOSS_CLIENT }}"
            SLACK_WEBHOOK_URL="${{ env.SLACK_WEBHOOK_URL }}"
            AWS_ACCESS_KEY="${{ env.AWS_ACCESS_KEY }}"
            AWS_SECRET_KEY="${{ env.AWS_SECRET_KEY }}"
            AWS_S3_BUCKET="${{ env.AWS_S3_BUCKET }}"
            DB_URL="${{ env.DB_URL }}"
            DB_USERNAME="${{ env.DB_USERNAME }}"
            DB_PASSWORD="${{ env.DB_PASSWORD }}"
            LOGSTASH_HOST="${{ env.LOGSTASH_HOST }}"
          ENV

          set -a 
          source ~/blue-green/.env 
          set +a
          cd ~/blue-green

          # ‚îÄ‚îÄ‚îÄ 1) compose ÌååÏùºÏóê ÌÉúÍ∑∏Í∞í Ï£ºÏûÖ ‚îÄ‚îÄ‚îÄ
          export IMAGE_TAG   # compose Í∞Ä env Î≥ÄÏàò ÏùΩÏùå

          if ! groups $USER | grep -q '\bdocker\b'; then
           sudo usermod -aG docker $USER
           exec sg docker newgrp docker <<'INNER'
           echo "[info] docker Í∑∏Î£π Ï¶âÏãú Ï†ÅÏö©"
          INNER
          fi
          
          # ‚îÄ‚îÄ‚îÄ 2) ÏÉà ÏÉâ Pull & Up ‚îÄ‚îÄ‚îÄ
          docker compose -f docker-compose.bluegreen.yml pull "spring-$COLOR"
          docker compose -f docker-compose.bluegreen.yml up -d redis nginx "spring-$COLOR"
          
          # ‚îÄ‚îÄ‚îÄ ÎîîÎ≤ÑÍ∑∏: Ïã§Ï†ú Ìó¨Ïä§ ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏùëÎãµÍ≥º Docker health ÏÉÅÌÉú Ï∂úÎ†• ‚îÄ‚îÄ‚îÄ

          docker exec spring-$COLOR curl -s --fail http://localhost:8080/actuator/health || echo "‚ùå curl failed"
               
          docker logs spring-$COLOR | tail -30
               
          docker inspect spring-$COLOR --format '{{json .State.Health}}'
    
          # ‚îÄ‚îÄ‚îÄ 3) Health check (ÏµúÎåÄ 120Ï¥à) ‚îÄ‚îÄ‚îÄ

          for i in {1..40}; do
            status=$(docker inspect -f '{{ .State.Health.Status }}' "spring-$COLOR" 2>/dev/null || echo starting)
            echo "loop $i : $status"
            [ "$status" = "healthy" ] && break
            sleep 3
          done

          [ "\$status" = "healthy" ] || {
           echo 'Health FAIL';
           docker logs "spring-$COLOR" | tail -50;
           exit 1;
          }

            # ‚îÄ‚îÄ‚îÄ 4) Ïä§ÏúÑÏπò ‚îÄ‚îÄ‚îÄ
          docker compose -f docker-compose.bluegreen.yml exec nginx nginx -s reload
          docker compose -f docker-compose.bluegreen.yml stop "$OLD" || true
          EOF
          

      - name: Show Spring logs on failure
        if: failure()
        run: |
          echo "üî¥ Showing spring-${COLOR} logs..."
          docker logs spring-${COLOR} || true

