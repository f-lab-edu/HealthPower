name: Deploy Spring Boot to EC2

env:
  SSH_KEY_PATH: ${{ github.workspace }}/homepem.pem
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_HOST: ${{ secrets.EC2_HOST }}

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Decode PEM key for EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/homepem.pem
          chmod 600 ${{ github.workspace }}/homepem.pem

      - name: üê≥ Install Docker & Docker Compose on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            sudo apt update
            sudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list
            sudo apt update
            sudo apt install -y docker-ce docker-ce-cli containerd.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          EOF

      - name: Clean old JARs
        run: rm -f build/libs/*.jar

      - name: Build Spring Boot application
        run: ./gradlew clean bootJar

      - name: Create elk directory on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ~/elk/logstash"
          

      # 3) ÏÉà JAR ÏóÖÎ°úÎìú (inactive ÏÉâ)
      - name: Upload JAR
        id: upload
        run: |
          JAR=$(ls -1 build/libs/*.jar | tail -n1)
          
          COLOR=$(ssh -o StrictHostKeyChecking=no -i $SSH_KEY_PATH $EC2_USER@$EC2_HOST "\
            if docker ps -a --format '{{.Names}}' | grep -q '^spring-blue$'; then echo green; else echo blue; fi")
          echo "color=$COLOR" >> $GITHUB_OUTPUT
          
          scp -o StrictHostKeyChecking=no -i $SSH_KEY_PATH \
               "$JAR" \
              ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/blue-green/spring-$COLOR/app.jar

      # 4) Blue-Green Ïä§ÏúÑÏπò
      - name: Switch containers
        run: |
          COLOR=${{ steps.upload.outputs.color }}
          ssh -o StrictHostKeyChecking=no -i $SSH_KEY_PATH ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<EOSSH
          set -e
          cd ~/blue-green

          docker compose -f docker-compose.bluegreen.yml up -d --no-deps spring-\$COLOR

          # Ìó¨Ïä§Ï≤¥ÌÅ¨ 60 Ï¥à ÎåÄÍ∏∞
          for i in {1..20}; do
           status=\$(docker inspect -f '{{ .State.Health.Status }}' spring-\$COLOR)
           [ "\$status" = "healthy" ] && break || sleep 3
          done
          [ "\$status" = "healthy" ] || { echo "Health FAIL"; exit 1; }

          docker compose -f docker-compose.bluegreen.yml exec nginx nginx -s reload

          # Íµ¨Î≤ÑÏ†Ñ Ï†ïÏßÄ
          OLD=\$( [ "\$COLOR" = "blue" ] && echo spring-green || echo spring-blue )
          docker compose -f docker-compose.bluegreen.yml stop \$OLD || true
          EOSSH


      - name: Upload files to EC2
        run: |
          JAR_FILE=$(find build/libs -name "*.jar" | sort | tail -n1)
          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem "$JAR_FILE" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app.jar
          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem Dockerfile ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Dockerfile
          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem src/main/resources/application.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/application.yml
          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem elk/docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/elk/docker-compose.yml
          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem elk/logstash/logstash.conf ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/elk/logstash/logstash.conf

      - name: Run Docker Compose with ELK
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << "EOF"
            cd ~/elk
            sudo docker-compose down || true
            sudo docker-compose up -d
          EOF

      - name: üõ† Install Java on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << "EOF"
            sudo apt update
            sudo apt install -y openjdk-21-jdk
          EOF

      - name: Run Spring Boot App on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            echo "üîÅ Í∏∞Ï°¥ Ïï± Ï¢ÖÎ£å"
            pkill -f java || true
          
            echo "‚è≥ logstash Ìè¨Ìä∏ Ïò§Ìîà ÎåÄÍ∏∞"
            while ! nc -z localhost 5000; do
              echo "logstashÍ∞Ä ÏïÑÏßÅ Ï§ÄÎπÑÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÎåÄÍ∏∞ Ï§ë..."
              sleep 3
            done
      
            echo "üå± ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export TOSS_SECRET="${{ secrets.TOSS_SECRET }}"
            export TOSS_CLIENT="${{ secrets.TOSS_CLIENT }}"
            export SLACK_WEBHOOK_URL="${{ secrets.SLACK_WEBHOOK_URL }}"
            export AWS_ACCESS_KEY="${{ secrets.AWS_ACCESS_KEY }}"
            export AWS_SECRET_KEY="${{ secrets.AWS_SECRET_KEY }}"
            export AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}"
            export DB_URL="${{ secrets.DB_URL }}"
            export DB_USERNAME="${{ secrets.DB_USERNAME }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
      
            echo "üöÄ Spring Boot Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏãúÏûë"
            nohup java \
            -Dspring.profiles.active=prod \
            -jar /home/ubuntu/app.jar \
            --spring.config.additional-location=file:/home/ubuntu/ \
            > /home/ubuntu/app.log 2>&1 &
          EOF

      - name: Slack Notify - ÏÑ±Í≥µ
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚úÖ HealthPower ÏÑúÎ≤Ñ Î∞∞Ìè¨ ÏÑ±Í≥µ!"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}

      - name: Slack Notify - Ïã§Ìå®
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚ùå HealthPower ÏÑúÎ≤Ñ Î∞∞Ìè¨ Ïã§Ìå®! ÌôïÏù∏ ÌïÑÏöî"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}
