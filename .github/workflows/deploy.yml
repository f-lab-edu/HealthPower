name: Deploy Spring Boot to EC2

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Decode PEM key for EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > ${{ github.workspace }}/homepem.pem
          chmod 600 ${{ github.workspace }}/homepem.pem

      - name: üîç Verify PEM file existence
        run: |
          echo "Checking if PEM file exists..."
          ls -alh ${{ github.workspace }}/homepem.pem

      - name: Clean old JARs
        run: rm -f build/libs/*.jar

      - name: Build Spring Boot application
        run: ./gradlew clean bootJar

      - name: Upload JAR and Dockerfile to EC2 via SCP
        run: |
          JAR_FILE=$(find build/libs -name "*.jar" | sort | tail -n1)
          echo "Uploading $JAR_FILE to EC2..."
          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem "$JAR_FILE" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app.jar
          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem Dockerfile ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Dockerfile
          scp -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/docker-compose.yml

      - name: Run Spring Boot App on EC2
        run: |
          chmod 600 ${{ github.workspace }}/homepem.pem

          ssh -o StrictHostKeyChecking=no -i ${{ github.workspace }}/homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << "EOF"
            echo "Stopping old app if running..."
            pkill -f java || true
            echo "Starting Spring Boot app..."
            nohup java \
              -Dspring.profiles.active=prod \
              -Dspring.datasource.url="${{ secrets.DB_URL }}" \
              -Dspring.datasource.username="${{ secrets.DB_USERNAME }}" \
              -Dspring.datasource.password="${{ secrets.DB_PASSWORD }}" \
              -Djwt.secret="${{ secrets.JWT_SECRET }}" \
              -Dtoss.secret="${{ secrets.TOSS_SECRET }}" \
              -Dtoss.client="${{ secrets.TOSS_CLIENT }}" \
              -Dcloud.aws.credentials.access-key="${{ secrets.AWS_ACCESS_KEY }}" \
              -Dcloud.aws.credentials.secret-key="${{ secrets.AWS_SECRET_KEY }}" \
              -Dcloud.aws.s3.bucket="${{ secrets.AWS_S3_BUCKET }}" \
              -Dslack.webhook.url="${{ secrets.SLACK_WEBHOOK_URL }}" \
              -Dapp.upload.dir=/home/ubuntu/uploads \
              -jar /home/ubuntu/app.jar > /home/ubuntu/app.log 2>&1 &
          EOF

      - name: Slack Notify - ÏÑ±Í≥µ
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚úÖ HealthPower ÏÑúÎ≤Ñ Î∞∞Ìè¨ ÏÑ±Í≥µ!"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}

      - name: Slack Notify - Ïã§Ìå®
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"‚ùå HealthPower ÏÑúÎ≤Ñ Î∞∞Ìè¨ Ïã§Ìå®! ÌôïÏù∏ ÌïÑÏöî"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}
