name: Deploy Spring Boot to EC2

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Set up prod DB properties
        run: |
          echo "spring.datasource.url=${{ secrets.DB_URL }}" >> application-prod.properties
          echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> application-prod.properties
          echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> application-prod.properties
          echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> application-prod.properties
          echo "spring.jpa.hibernate.ddl-auto=update" >> application-prod.properties
          echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect" >> application-prod.properties
          echo "jwt.secret=${{ secrets.JWT_SECRET }}" >> application-prod.properties
          echo "toss.secret=${{ secrets.TOSS_SECRET }}" >> application-prod.properties
          echo "cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY }}" >> application-prod.properties
          echo "cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_KEY }}" >> application-prod.properties
          echo "slack.webhook.url=${{ secrets.SLACK_WEBHOOK_URL }}" >> application-prod.properties
          echo "cloud.aws.region.static=ap-northeast-2" >> application-prod.properties
          echo "cloud.aws.s3.bucket=${{ secrets.AWS_S3_BUCKET }}" >> application-prod.properties
          echo "server.port=8080" >> application-prod.properties
          echo "app.upload.dir=/home/ubuntu/uploads" >> application-prod.properties
          echo "management.endpoint.prometheus.enabled=true" >> application-prod.properties
          echo "management.endpoints.web.exposure.include=health,info,prometheus" >> application-prod.properties

      - name: Decode PEM key for EC2
        run: |
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d > homepem.pem
          chmod 600 homepem.pem

      - name: Upload prod properties to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i homepem.pem application-prod.properties ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/application-prod.properties

      - name: Build Spring Boot application (fat JAR)
        run: ./gradlew clean bootJar

      - name: Upload JAR and Dockerfile to EC2 via SCP
        run: |
          JAR_FILE=$(ls build/libs/*.jar | head -n 1)
          echo "Uploading $JAR_FILE to EC2..."
          scp -o StrictHostKeyChecking=no -i homepem.pem "$JAR_FILE" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app.jar
          scp -o StrictHostKeyChecking=no -i homepem.pem Dockerfile ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/Dockerfile

      - name: Upload prometheus.yml to EC2
        run: |
          scp -i homepem.pem prometheus/prometheus.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/prometheus.yml

      - name: Upload Grafana provisioning files
        run: |
          scp -i homepem.pem -r grafana ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/grafana

      - name: Upload Prometheus & AlertManager config
        run: |
          scp -i homepem.pem prometheus/prometheus.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/prometheus.yml
          scp -i homepem.pem prometheus/alert.rules.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/alert.rules.yml
          scp -i homepem.pem prometheus/alertmanager.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/alertmanager.yml

      - name: Create log directory on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          mkdir -p /home/ubuntu/logs && chmod 755 /home/ubuntu/logs
          "

      - name: Run Spring Boot App on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          echo "Creating upload directory..."
          mkdir -p /home/ubuntu/uploads

          echo "Stopping existing Java process..."
          pkill -f 'java' || true

          echo "Starting Spring Boot application..."
          nohup java -Dspring.config.location=/home/ubuntu/application-prod.properties \
          -Dspring.profiles.active=prod -jar /home/ubuntu/app.jar > /home/ubuntu/app.log 2>&1 &
          EOF

      - name: Run Blue-Green Deployment
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          "CURRENT=\$(docker ps | grep spring-blue && echo blue || echo green); echo 현재버전은 \$CURRENT"

      - name: Print server log after failure
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          'tail -n 100 /home/ubuntu/app.log'

      #      - name: Health check
      #        run: |
      #          sleep 45  # 서버 부팅 대기
      #          curl -f http://${{ secrets.EC2_HOST }}:8080

      - name: Create Docker network if not exists
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            docker network inspect monitoring-net >/dev/null 2>&1 || docker network create monitoring-net
          "

      - name: Run Docker container on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          cd ~
          docker rm -f healthpower-app || true
          docker build -t healthpower-image .
          
          docker run -d \
          --name healthpower-app \
          --network monitoring-net \
          -p 8080:8080 \
          healthpower-image
          EOF

      - name: Run Prometheus container
        run: |
          ssh -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          docker rm -f prometheus || true
          docker run -d \
            --name prometheus \
            --network monitoring-net \
            -p 9090:9090 \
            -v /home/ubuntu/prometheus.yml:/etc/prometheus/prometheus.yml \
            prom/prometheus
          EOF

      - name: Run Grafana container
        run: |
          ssh -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          docker rm -f grafana || true
          docker run -d \
            --name grafana \
            --network monitoring-net \
            -p 3000:3000 \
            -v /home/ubuntu/grafana/provisioning:/etc/grafana/provisioning \
            grafana/grafana
          EOF

      - name: Run AlertManager container
        run: |
          ssh -i homepem.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          docker rm -f alertmanager || true
          docker run -d \
            --name alertmanager \
            --network monitoring-net \
            -p 9093:9093 \
            -v /home/ubuntu/alertmanager.yml:/etc/alertmanager/alertmanager.yml \
            prom/alertmanager
          EOF

      - name: Slack Notify - 성공
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":" HealthPower 서버 배포 성공! "}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}

      - name: Slack Notify - 실패
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":" *HealthPower* 서버 배포 *실패* \n확인 필요!"}' \
            ${{ secrets.SLACK_ALERT_WEBHOOK }}




