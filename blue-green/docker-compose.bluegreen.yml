networks:
  bg:
    driver: bridge

x-app-env: &app-env
  JWT_SECRET:       ${JWT_SECRET}
  TOSS_SECRET:      ${TOSS_SECRET}
  TOSS_CLIENT:      ${TOSS_CLIENT}
  SLACK_WEBHOOK_URL : ${SLACK_WEBHOOK_URL}
  AWS_ACCESS_KEY:   ${AWS_ACCESS_KEY}
  AWS_SECRET_KEY:   ${AWS_SECRET_KEY}
  AWS_S3_BUCKET:    ${AWS_S3_BUCKET}
  DB_URL:           ${DB_URL}
  DB_USERNAME:      ${DB_USERNAME}
  DB_PASSWORD:      ${DB_PASSWORD}
  LOGSTASH_HOST:    ${LOGSTASH_HOST}
  SPRING_PROFILES_ACTIVE: prod            # ← 스프링 프로필
  REDIS_HOST:       redis

services:
  redis:
    image: redis:7-alpine
    container_name: redis
    expose: [ "6379" ]
    networks: [ bg ]

  spring-blue: &app
    # GitHub Actions 스크립트에서
    #   /home/ubuntu/blue-green/spring-blue/
    # 폴더에 Dockerfile, app.jar, application-prod.properties 를 복사해 둡니다
    build:
      context: ./spring-blue              # ← 원격 서버 기준 경로
      dockerfile: ../Dockerfile           # 루트 Dockerfile 재사용
    container_name: spring-blue
    environment: *app-env
    depends_on: [redis]          # ★ redis 먼저 기동
    expose: ["8080"]
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health || exit 0"]
#      interval: 10s
#      start_period: 90s                   # 최초 부팅 여유
#      retries: 12
    networks: [bg]

  spring-green:
    <<: *app
    container_name: spring-green
    depends_on: [redis]          # ★ redis 먼저 기동
    build:
      context: ./spring-green             # Green 색의 빌드 컨텍스트

  nginx:
    image: nginx:1.27-alpine
    container_name: nginx-proxy
    volumes:
      # GitHub Actions 스크립트가 복사해 두는 conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "80:80"
    depends_on:
      - spring-blue
      - spring-green
    networks: [bg]
