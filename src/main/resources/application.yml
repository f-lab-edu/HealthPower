spring:
  profiles:
    active: local # 실행 시 필요에 따라 prod, dev, local 변경
#    active: prod

---
spring:
  config:
    activate:
      on-profile: local
  mvc:
    locale: ko_KR
    locale-resolver: fixed
    hiddenmethod:
      filter:
        enabled: true
  application:
    name: HealthPower
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
  datasource:
    url: jdbc:mysql://localhost:3306/springJWT?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
    username: root
    password: 1234
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  redis:
    host: localhost
    port: 6379
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.example.HealthPower.kafka
        spring.json.value.default.type: com.example.HealthPower.kafka.CouponIssuedEvent
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  session:
    store-type: redis
jwt:
  secret: "cG93ZXJwb3dlcnRlc3RoZWFsdGhwb3dlcnRoZXN0cG93ZXI="

toss:
  secret: "test_sk_6BYq7GWPVvnRvyQgxoMwVNE5vbo1"
  client: "test_gck_docs_Ovk5rk1EwkEbP0W43n07xlzm"

app:
  upload:
    dir: C:/Users/JJS/Downloads
servlet:
  multipart:
    enabled: true
    max-file-size: 10MB
    max-request-size: 10MB
http:
  encoding:
    force: true
    charset: UTF-8
    enabled: true
management:
  endpoints:
    web:
      exposure:
        include: health
cloud:
  aws:
    credentials:
      access-key: ""
      secret-key: ""
    s3:
      bucket: healthpowerbucket
    region:
      static: ap-northeast-2
    stack:
      auto: false
slack:
  webhook:
    url: https://hooks.slack.com/services/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

spring.jpa.show-sql: true
spring.jpa.properties.hibernate.format_sql: true

logging:
  level:
    org.springframework.web.socket: DEBUG
    org.springframework.messaging.simp: DEBUG

---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    url: ${DB_LOCAL_URL}
    username: root
    password: 1234
  cloud:
    aws:
      credentials:
        access-key: ${AWS_ACCESS_KEY:}
        secret-key: ${AWS_SECRET_KEY:}
      region:
        static: ap-northeast-2
      s3:
        bucket: ${AWS_S3_BUCKET:dev-default-bucket}
      stack:
        auto: false
  jwt:
    secret: ${JWT_SECRET}
  toss:
    secret: ${TOSS_SECRET}
  app:
    upload:
      dir: /home/ubuntu/uploads
  server:
    port: 8080
  management:
    endpoints:
      web:
        exposure:
          include: health,info
        base-path: /actuator
    endpoint:
      health:
        show-details: always
  slack:
    webhook:
      url: ${SLACK_WEBHOOK_URL}

---
spring:
  redis:
    host: redis
    port: 6379
  config:
    activate:
      on-profile: prod
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  data:
    redis:
      host: redis
      port: 6379
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
    show-sql: true
cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    s3:
      bucket: ${AWS_S3_BUCKET}
    region:
      static: ap-northeast-2
    stack:
      auto: false
jwt:
  secret: ${JWT_SECRET}
toss:
  secret: ${TOSS_SECRET}
  client: ${TOSS_CLIENT}
server:
  port: 8080
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
slack:
  webhook:
    url: ${SLACK_WEBHOOK_URL}
app:
  upload:
    dir: /home/ubuntu/uploads
logstash:
  host: localhost
  port: 5000

